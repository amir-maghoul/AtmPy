grid
====

.. py:module:: grid


Classes
-------

.. autoapisummary::

   grid.Grid
   grid.CellGrid
   grid.NodeGrid


Functions
---------

.. autoapisummary::

   grid.main


Module Contents
---------------

.. py:class:: Grid(ranges=np.zeros((3, 2)), ninodes=np.zeros(3), nghosts=np.zeros(3))

   Initialize a general grid with x, y, and z

   Attributes
   ----------
   ranges : 2D np.ndarray of shape (3, 2)
       ranges of coordinates in each direction
   ninodes : np.ndarray of shape (3,)
       array of number of inner nodes in each direction (inner nodes are nodes that are not ghost nodes)
   nghosts : np.ndarray of shape (3,)
       array of number of ghosts cells in each direction
   nnodes : np.ndarray of shape (3,)
       array of inner nodes in each direction
   dim : int
       dimension of the grid
   L : np.ndarray or list of shape (3, 1)
       length of intervals in each coordinate direction
   nnx, nny, nnz : int
       number of nodes in each direction
   ngx, ngy, ngz : int
       number of ghost cells in each direction
   nix, niy, niz : int
       number of inner nodes in each direction
   xlims, ylims, zlims : ndarray of shape (2,)
       upper and lower bounds of the intervals in each direction
   dx, dy, dz : float
       the fineness of discretization in each direction
   ds : np.ndarray
       array of discretization fineness in each direction
   outer_xlims, outer_xlims, outer_xlims : ndarray of shape (2, )
       array of limits in each direction by considering the ghost nodes
   x, y, z : ndarray of shape (nnodes, )
       array of coordinates in each direction by considering the ghost cells
   ix, iy, iz : ndarray of shape (inodes, )
       array of coordinates of inner nodes in each direction



   .. py:attribute:: L


   .. py:attribute:: dim


   .. py:attribute:: ranges


   .. py:attribute:: nghosts


   .. py:attribute:: ninodes


   .. py:attribute:: nnodes


   .. py:attribute:: dx


   .. py:attribute:: dy


   .. py:attribute:: dz


   .. py:attribute:: ds


   .. py:attribute:: outer_xlims


   .. py:attribute:: outer_ylims


   .. py:attribute:: outer_zlims


   .. py:attribute:: x


   .. py:attribute:: y


   .. py:attribute:: z


   .. py:attribute:: ix


   .. py:attribute:: iy


   .. py:attribute:: iz


   .. py:attribute:: zeros


   .. py:method:: _compute_outer_lims(lim, ng, ds)
      :staticmethod:


      Computes the outer lims of the grid in each direction



   .. py:method:: _coordinates(lims, n)
      :staticmethod:


      Compute coodinates of the outer NODES



.. py:class:: CellGrid(ranges=np.zeros((3, 2)), ninodes=np.zeros(3), nghosts=np.zeros(3))

   Bases: :py:obj:`Grid`


   Class of cell grid. The unmentioned attributes of the class are overriden attributes of the parent class.


   .. py:attribute:: new_begin


   .. py:attribute:: new_end


   .. py:attribute:: ninodes


   .. py:attribute:: nnodes


   .. py:attribute:: x


   .. py:attribute:: y


   .. py:attribute:: z


.. py:class:: NodeGrid

   Bases: :py:obj:`Grid`


   Initialize a general grid with x, y, and z

   Attributes
   ----------
   ranges : 2D np.ndarray of shape (3, 2)
       ranges of coordinates in each direction
   ninodes : np.ndarray of shape (3,)
       array of number of inner nodes in each direction (inner nodes are nodes that are not ghost nodes)
   nghosts : np.ndarray of shape (3,)
       array of number of ghosts cells in each direction
   nnodes : np.ndarray of shape (3,)
       array of inner nodes in each direction
   dim : int
       dimension of the grid
   L : np.ndarray or list of shape (3, 1)
       length of intervals in each coordinate direction
   nnx, nny, nnz : int
       number of nodes in each direction
   ngx, ngy, ngz : int
       number of ghost cells in each direction
   nix, niy, niz : int
       number of inner nodes in each direction
   xlims, ylims, zlims : ndarray of shape (2,)
       upper and lower bounds of the intervals in each direction
   dx, dy, dz : float
       the fineness of discretization in each direction
   ds : np.ndarray
       array of discretization fineness in each direction
   outer_xlims, outer_xlims, outer_xlims : ndarray of shape (2, )
       array of limits in each direction by considering the ghost nodes
   x, y, z : ndarray of shape (nnodes, )
       array of coordinates in each direction by considering the ghost cells
   ix, iy, iz : ndarray of shape (inodes, )
       array of coordinates of inner nodes in each direction



.. py:function:: main()

